#pragma once
/*
* 	mr.Escow - Lesson-4
* * * * * * * * * * * * * * * */
#include "Header.h"
//-------------------------------------------------------------------------------------------
/*
	1.Имеется отсортированный массив целых чисел.
	Необходимо разработать функцию insert_sorted, 
	которая принимает вектор и новое число и вставляет новое число в определенную позицию в векторе, 
	чтобы упорядоченность контейнера сохранялась.Реализуйте шаблонную функцию insert_sorted, 
	которая сможет аналогично работать с любым контейнером, содержащим любой тип значения.
*/
//-------------------------------------------------------------------------------------------
template<typename CONTAINER,typename TYPE>
void insert_sorted(CONTAINER &container, const TYPE number) {

		const auto insert_pos(std::lower_bound(std::begin(container), std::end(container), number));
		container.insert(insert_pos, number);
}
//-------------------------------------------------------------------------------------------
/*
	2.Сгенерируйте вектор a, состоящий из 100 вещественный чисел, 
	представляющий собой значения аналогового сигнала.
	На основе этого массива чисел создайте другой вектор целых чисел b, 
	представляющий цифровой сигнал, в котором будут откинуты дробные части чисел.
	Выведите получившиеся массивы чисел.
	Посчитайте ошибку, которой обладает цифровой сигнал по сравнению с аналоговым по формуле :

			N-1 E i=0  (ai - bi)^2,

	где :
		N - количество элементов в векторе,
		a - элемент вектора с дробными числами,
		b - элемент вектора с целыми числами
		Постарайтесь воспользоваться алгоритмическими функциями, не используя циклы.
*/
//-------------------------------------------------------------------------------------------
int Lesson4() {

	std::list<double> list{2.0, 5, 0, 1.0, -50.4, 74.2};
	list.sort();

	std::vector<double> vec{ 2.0, 5, 0, 1.0, -50.4, 74.2 };
	std::sort(begin(vec), end(vec));

	insert_sorted(list, 7.0);
	insert_sorted(vec, 7.0);

	for (auto& v : list)
		std::cout << v << "\t";
	std::cout << "\n";
	for (auto& v : vec)
		std::cout << v << "\t";
	std::cout << "\n";

	//--------------------------------------

	std::vector<float> a(100);

	generate(a.begin(), a.end(), []() {return (rand() % 100/3.f  ); });

	std::vector<int> b(100);

	std::copy(begin(a), end(a), begin(b));

	for (auto& n : a)
		std::cout << n << "\t";
	std::cout << "\n";

	for (auto& n : b)
		std::cout << n << "\t";
	std::cout << "\n";

	//N - 1 E i = 0  (ai - bi) ^ 2, 

	float delta{ 0 };
	//for (size_t i = 0; i < 100; ++i) {
	//	delta += (a[i] - b[i]) * (a[i] - b[i]);
	//}
	//std::cout << delta << std::endl;


	delta = 0;	
	auto result = std::inner_product(begin(a), end(a), begin(b), delta, std::plus<>(), [](float a,int b) {
		return (a - b) * (a - b);
		});
	std::cout << result << std::endl;



	return 0;
}
//-------------------------------------------------------------------------------------------