// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: Students.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_Students_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_Students_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3017000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3017001 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_Students_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_Students_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxiliaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[3]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_Students_2eproto;
namespace Students {
class FuLLName;
struct FuLLNameDefaultTypeInternal;
extern FuLLNameDefaultTypeInternal _FuLLName_default_instance_;
class Student;
struct StudentDefaultTypeInternal;
extern StudentDefaultTypeInternal _Student_default_instance_;
class StudentGroup;
struct StudentGroupDefaultTypeInternal;
extern StudentGroupDefaultTypeInternal _StudentGroup_default_instance_;
}  // namespace Students
PROTOBUF_NAMESPACE_OPEN
template<> ::Students::FuLLName* Arena::CreateMaybeMessage<::Students::FuLLName>(Arena*);
template<> ::Students::Student* Arena::CreateMaybeMessage<::Students::Student>(Arena*);
template<> ::Students::StudentGroup* Arena::CreateMaybeMessage<::Students::StudentGroup>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace Students {

// ===================================================================

class FuLLName final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Students.FuLLName) */ {
 public:
  inline FuLLName() : FuLLName(nullptr) {}
  ~FuLLName() override;
  explicit constexpr FuLLName(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  FuLLName(const FuLLName& from);
  FuLLName(FuLLName&& from) noexcept
    : FuLLName() {
    *this = ::std::move(from);
  }

  inline FuLLName& operator=(const FuLLName& from) {
    CopyFrom(from);
    return *this;
  }
  inline FuLLName& operator=(FuLLName&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const FuLLName& default_instance() {
    return *internal_default_instance();
  }
  static inline const FuLLName* internal_default_instance() {
    return reinterpret_cast<const FuLLName*>(
               &_FuLLName_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(FuLLName& a, FuLLName& b) {
    a.Swap(&b);
  }
  inline void Swap(FuLLName* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(FuLLName* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline FuLLName* New() const final {
    return new FuLLName();
  }

  FuLLName* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<FuLLName>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const FuLLName& from);
  void MergeFrom(const FuLLName& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(FuLLName* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Students.FuLLName";
  }
  protected:
  explicit FuLLName(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kNameFieldNumber = 1,
    kSurnameFieldNumber = 2,
    kPatronymicFieldNumber = 3,
  };
  // string Name = 1;
  void clear_name();
  const std::string& name() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_name(ArgT0&& arg0, ArgT... args);
  std::string* mutable_name();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_name();
  void set_allocated_name(std::string* name);
  private:
  const std::string& _internal_name() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_name(const std::string& value);
  std::string* _internal_mutable_name();
  public:

  // string Surname = 2;
  void clear_surname();
  const std::string& surname() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_surname(ArgT0&& arg0, ArgT... args);
  std::string* mutable_surname();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_surname();
  void set_allocated_surname(std::string* surname);
  private:
  const std::string& _internal_surname() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_surname(const std::string& value);
  std::string* _internal_mutable_surname();
  public:

  // optional string Patronymic = 3;
  bool has_patronymic() const;
  private:
  bool _internal_has_patronymic() const;
  public:
  void clear_patronymic();
  const std::string& patronymic() const;
  template <typename ArgT0 = const std::string&, typename... ArgT>
  void set_patronymic(ArgT0&& arg0, ArgT... args);
  std::string* mutable_patronymic();
  PROTOBUF_FUTURE_MUST_USE_RESULT std::string* release_patronymic();
  void set_allocated_patronymic(std::string* patronymic);
  private:
  const std::string& _internal_patronymic() const;
  inline PROTOBUF_ALWAYS_INLINE void _internal_set_patronymic(const std::string& value);
  std::string* _internal_mutable_patronymic();
  public:

  // @@protoc_insertion_point(class_scope:Students.FuLLName)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::HasBits<1> _has_bits_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr name_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr surname_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr patronymic_;
  friend struct ::TableStruct_Students_2eproto;
};
// -------------------------------------------------------------------

class Student final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Students.Student) */ {
 public:
  inline Student() : Student(nullptr) {}
  ~Student() override;
  explicit constexpr Student(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  Student(const Student& from);
  Student(Student&& from) noexcept
    : Student() {
    *this = ::std::move(from);
  }

  inline Student& operator=(const Student& from) {
    CopyFrom(from);
    return *this;
  }
  inline Student& operator=(Student&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const Student& default_instance() {
    return *internal_default_instance();
  }
  static inline const Student* internal_default_instance() {
    return reinterpret_cast<const Student*>(
               &_Student_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Student& a, Student& b) {
    a.Swap(&b);
  }
  inline void Swap(Student* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Student* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Student* New() const final {
    return new Student();
  }

  Student* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Student>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Student& from);
  void MergeFrom(const Student& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Student* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Students.Student";
  }
  protected:
  explicit Student(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kEvaluationsFieldNumber = 2,
    kFIOFieldNumber = 1,
    kAverageScoreFieldNumber = 3,
  };
  // repeated int32 Evaluations = 2;
  int evaluations_size() const;
  private:
  int _internal_evaluations_size() const;
  public:
  void clear_evaluations();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_evaluations(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_evaluations() const;
  void _internal_add_evaluations(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_evaluations();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 evaluations(int index) const;
  void set_evaluations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_evaluations(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      evaluations() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_evaluations();

  // .Students.FuLLName FIO = 1;
  bool has_fio() const;
  private:
  bool _internal_has_fio() const;
  public:
  void clear_fio();
  const ::Students::FuLLName& fio() const;
  PROTOBUF_FUTURE_MUST_USE_RESULT ::Students::FuLLName* release_fio();
  ::Students::FuLLName* mutable_fio();
  void set_allocated_fio(::Students::FuLLName* fio);
  private:
  const ::Students::FuLLName& _internal_fio() const;
  ::Students::FuLLName* _internal_mutable_fio();
  public:
  void unsafe_arena_set_allocated_fio(
      ::Students::FuLLName* fio);
  ::Students::FuLLName* unsafe_arena_release_fio();

  // double AverageScore = 3;
  void clear_averagescore();
  double averagescore() const;
  void set_averagescore(double value);
  private:
  double _internal_averagescore() const;
  void _internal_set_averagescore(double value);
  public:

  // @@protoc_insertion_point(class_scope:Students.Student)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > evaluations_;
  mutable std::atomic<int> _evaluations_cached_byte_size_;
  ::Students::FuLLName* fio_;
  double averagescore_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Students_2eproto;
};
// -------------------------------------------------------------------

class StudentGroup final :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:Students.StudentGroup) */ {
 public:
  inline StudentGroup() : StudentGroup(nullptr) {}
  ~StudentGroup() override;
  explicit constexpr StudentGroup(::PROTOBUF_NAMESPACE_ID::internal::ConstantInitialized);

  StudentGroup(const StudentGroup& from);
  StudentGroup(StudentGroup&& from) noexcept
    : StudentGroup() {
    *this = ::std::move(from);
  }

  inline StudentGroup& operator=(const StudentGroup& from) {
    CopyFrom(from);
    return *this;
  }
  inline StudentGroup& operator=(StudentGroup&& from) noexcept {
    if (this == &from) return *this;
    if (GetOwningArena() == from.GetOwningArena()) {
      InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return default_instance().GetMetadata().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return default_instance().GetMetadata().reflection;
  }
  static const StudentGroup& default_instance() {
    return *internal_default_instance();
  }
  static inline const StudentGroup* internal_default_instance() {
    return reinterpret_cast<const StudentGroup*>(
               &_StudentGroup_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(StudentGroup& a, StudentGroup& b) {
    a.Swap(&b);
  }
  inline void Swap(StudentGroup* other) {
    if (other == this) return;
    if (GetOwningArena() == other->GetOwningArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(StudentGroup* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetOwningArena() == other->GetOwningArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline StudentGroup* New() const final {
    return new StudentGroup();
  }

  StudentGroup* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<StudentGroup>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const StudentGroup& from);
  void MergeFrom(const StudentGroup& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  void SharedCtor();
  void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(StudentGroup* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "Students.StudentGroup";
  }
  protected:
  explicit StudentGroup(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kStudsFieldNumber = 1,
  };
  // repeated .Students.Student Studs = 1;
  int studs_size() const;
  private:
  int _internal_studs_size() const;
  public:
  void clear_studs();
  ::Students::Student* mutable_studs(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Students::Student >*
      mutable_studs();
  private:
  const ::Students::Student& _internal_studs(int index) const;
  ::Students::Student* _internal_add_studs();
  public:
  const ::Students::Student& studs(int index) const;
  ::Students::Student* add_studs();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Students::Student >&
      studs() const;

  // @@protoc_insertion_point(class_scope:Students.StudentGroup)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Students::Student > studs_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_Students_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// FuLLName

// string Name = 1;
inline void FuLLName::clear_name() {
  name_.ClearToEmpty();
}
inline const std::string& FuLLName::name() const {
  // @@protoc_insertion_point(field_get:Students.FuLLName.Name)
  return _internal_name();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FuLLName::set_name(ArgT0&& arg0, ArgT... args) {
 
 name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Students.FuLLName.Name)
}
inline std::string* FuLLName::mutable_name() {
  // @@protoc_insertion_point(field_mutable:Students.FuLLName.Name)
  return _internal_mutable_name();
}
inline const std::string& FuLLName::_internal_name() const {
  return name_.Get();
}
inline void FuLLName::_internal_set_name(const std::string& value) {
  
  name_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FuLLName::_internal_mutable_name() {
  
  return name_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FuLLName::release_name() {
  // @@protoc_insertion_point(field_release:Students.FuLLName.Name)
  return name_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FuLLName::set_allocated_name(std::string* name) {
  if (name != nullptr) {
    
  } else {
    
  }
  name_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), name,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Students.FuLLName.Name)
}

// string Surname = 2;
inline void FuLLName::clear_surname() {
  surname_.ClearToEmpty();
}
inline const std::string& FuLLName::surname() const {
  // @@protoc_insertion_point(field_get:Students.FuLLName.Surname)
  return _internal_surname();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FuLLName::set_surname(ArgT0&& arg0, ArgT... args) {
 
 surname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Students.FuLLName.Surname)
}
inline std::string* FuLLName::mutable_surname() {
  // @@protoc_insertion_point(field_mutable:Students.FuLLName.Surname)
  return _internal_mutable_surname();
}
inline const std::string& FuLLName::_internal_surname() const {
  return surname_.Get();
}
inline void FuLLName::_internal_set_surname(const std::string& value) {
  
  surname_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FuLLName::_internal_mutable_surname() {
  
  return surname_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FuLLName::release_surname() {
  // @@protoc_insertion_point(field_release:Students.FuLLName.Surname)
  return surname_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FuLLName::set_allocated_surname(std::string* surname) {
  if (surname != nullptr) {
    
  } else {
    
  }
  surname_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), surname,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Students.FuLLName.Surname)
}

// optional string Patronymic = 3;
inline bool FuLLName::_internal_has_patronymic() const {
  bool value = (_has_bits_[0] & 0x00000001u) != 0;
  return value;
}
inline bool FuLLName::has_patronymic() const {
  return _internal_has_patronymic();
}
inline void FuLLName::clear_patronymic() {
  patronymic_.ClearToEmpty();
  _has_bits_[0] &= ~0x00000001u;
}
inline const std::string& FuLLName::patronymic() const {
  // @@protoc_insertion_point(field_get:Students.FuLLName.Patronymic)
  return _internal_patronymic();
}
template <typename ArgT0, typename... ArgT>
inline PROTOBUF_ALWAYS_INLINE
void FuLLName::set_patronymic(ArgT0&& arg0, ArgT... args) {
 _has_bits_[0] |= 0x00000001u;
 patronymic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, static_cast<ArgT0 &&>(arg0), args..., GetArenaForAllocation());
  // @@protoc_insertion_point(field_set:Students.FuLLName.Patronymic)
}
inline std::string* FuLLName::mutable_patronymic() {
  // @@protoc_insertion_point(field_mutable:Students.FuLLName.Patronymic)
  return _internal_mutable_patronymic();
}
inline const std::string& FuLLName::_internal_patronymic() const {
  return patronymic_.Get();
}
inline void FuLLName::_internal_set_patronymic(const std::string& value) {
  _has_bits_[0] |= 0x00000001u;
  patronymic_.Set(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, value, GetArenaForAllocation());
}
inline std::string* FuLLName::_internal_mutable_patronymic() {
  _has_bits_[0] |= 0x00000001u;
  return patronymic_.Mutable(::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr::EmptyDefault{}, GetArenaForAllocation());
}
inline std::string* FuLLName::release_patronymic() {
  // @@protoc_insertion_point(field_release:Students.FuLLName.Patronymic)
  if (!_internal_has_patronymic()) {
    return nullptr;
  }
  _has_bits_[0] &= ~0x00000001u;
  return patronymic_.ReleaseNonDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArenaForAllocation());
}
inline void FuLLName::set_allocated_patronymic(std::string* patronymic) {
  if (patronymic != nullptr) {
    _has_bits_[0] |= 0x00000001u;
  } else {
    _has_bits_[0] &= ~0x00000001u;
  }
  patronymic_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), patronymic,
      GetArenaForAllocation());
  // @@protoc_insertion_point(field_set_allocated:Students.FuLLName.Patronymic)
}

// -------------------------------------------------------------------

// Student

// .Students.FuLLName FIO = 1;
inline bool Student::_internal_has_fio() const {
  return this != internal_default_instance() && fio_ != nullptr;
}
inline bool Student::has_fio() const {
  return _internal_has_fio();
}
inline void Student::clear_fio() {
  if (GetArenaForAllocation() == nullptr && fio_ != nullptr) {
    delete fio_;
  }
  fio_ = nullptr;
}
inline const ::Students::FuLLName& Student::_internal_fio() const {
  const ::Students::FuLLName* p = fio_;
  return p != nullptr ? *p : reinterpret_cast<const ::Students::FuLLName&>(
      ::Students::_FuLLName_default_instance_);
}
inline const ::Students::FuLLName& Student::fio() const {
  // @@protoc_insertion_point(field_get:Students.Student.FIO)
  return _internal_fio();
}
inline void Student::unsafe_arena_set_allocated_fio(
    ::Students::FuLLName* fio) {
  if (GetArenaForAllocation() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(fio_);
  }
  fio_ = fio;
  if (fio) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:Students.Student.FIO)
}
inline ::Students::FuLLName* Student::release_fio() {
  
  ::Students::FuLLName* temp = fio_;
  fio_ = nullptr;
  if (GetArenaForAllocation() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::Students::FuLLName* Student::unsafe_arena_release_fio() {
  // @@protoc_insertion_point(field_release:Students.Student.FIO)
  
  ::Students::FuLLName* temp = fio_;
  fio_ = nullptr;
  return temp;
}
inline ::Students::FuLLName* Student::_internal_mutable_fio() {
  
  if (fio_ == nullptr) {
    auto* p = CreateMaybeMessage<::Students::FuLLName>(GetArenaForAllocation());
    fio_ = p;
  }
  return fio_;
}
inline ::Students::FuLLName* Student::mutable_fio() {
  // @@protoc_insertion_point(field_mutable:Students.Student.FIO)
  return _internal_mutable_fio();
}
inline void Student::set_allocated_fio(::Students::FuLLName* fio) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArenaForAllocation();
  if (message_arena == nullptr) {
    delete fio_;
  }
  if (fio) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
        ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper<::Students::FuLLName>::GetOwningArena(fio);
    if (message_arena != submessage_arena) {
      fio = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, fio, submessage_arena);
    }
    
  } else {
    
  }
  fio_ = fio;
  // @@protoc_insertion_point(field_set_allocated:Students.Student.FIO)
}

// repeated int32 Evaluations = 2;
inline int Student::_internal_evaluations_size() const {
  return evaluations_.size();
}
inline int Student::evaluations_size() const {
  return _internal_evaluations_size();
}
inline void Student::clear_evaluations() {
  evaluations_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::_internal_evaluations(int index) const {
  return evaluations_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Student::evaluations(int index) const {
  // @@protoc_insertion_point(field_get:Students.Student.Evaluations)
  return _internal_evaluations(index);
}
inline void Student::set_evaluations(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  evaluations_.Set(index, value);
  // @@protoc_insertion_point(field_set:Students.Student.Evaluations)
}
inline void Student::_internal_add_evaluations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  evaluations_.Add(value);
}
inline void Student::add_evaluations(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_evaluations(value);
  // @@protoc_insertion_point(field_add:Students.Student.Evaluations)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Student::_internal_evaluations() const {
  return evaluations_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Student::evaluations() const {
  // @@protoc_insertion_point(field_list:Students.Student.Evaluations)
  return _internal_evaluations();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Student::_internal_mutable_evaluations() {
  return &evaluations_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Student::mutable_evaluations() {
  // @@protoc_insertion_point(field_mutable_list:Students.Student.Evaluations)
  return _internal_mutable_evaluations();
}

// double AverageScore = 3;
inline void Student::clear_averagescore() {
  averagescore_ = 0;
}
inline double Student::_internal_averagescore() const {
  return averagescore_;
}
inline double Student::averagescore() const {
  // @@protoc_insertion_point(field_get:Students.Student.AverageScore)
  return _internal_averagescore();
}
inline void Student::_internal_set_averagescore(double value) {
  
  averagescore_ = value;
}
inline void Student::set_averagescore(double value) {
  _internal_set_averagescore(value);
  // @@protoc_insertion_point(field_set:Students.Student.AverageScore)
}

// -------------------------------------------------------------------

// StudentGroup

// repeated .Students.Student Studs = 1;
inline int StudentGroup::_internal_studs_size() const {
  return studs_.size();
}
inline int StudentGroup::studs_size() const {
  return _internal_studs_size();
}
inline void StudentGroup::clear_studs() {
  studs_.Clear();
}
inline ::Students::Student* StudentGroup::mutable_studs(int index) {
  // @@protoc_insertion_point(field_mutable:Students.StudentGroup.Studs)
  return studs_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Students::Student >*
StudentGroup::mutable_studs() {
  // @@protoc_insertion_point(field_mutable_list:Students.StudentGroup.Studs)
  return &studs_;
}
inline const ::Students::Student& StudentGroup::_internal_studs(int index) const {
  return studs_.Get(index);
}
inline const ::Students::Student& StudentGroup::studs(int index) const {
  // @@protoc_insertion_point(field_get:Students.StudentGroup.Studs)
  return _internal_studs(index);
}
inline ::Students::Student* StudentGroup::_internal_add_studs() {
  return studs_.Add();
}
inline ::Students::Student* StudentGroup::add_studs() {
  // @@protoc_insertion_point(field_add:Students.StudentGroup.Studs)
  return _internal_add_studs();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::Students::Student >&
StudentGroup::studs() const {
  // @@protoc_insertion_point(field_list:Students.StudentGroup.Studs)
  return studs_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace Students

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_Students_2eproto
